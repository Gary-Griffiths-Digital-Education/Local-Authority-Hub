// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LAHubDbContext))]
    partial class LAHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.Accessibility_For_Disabilities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Accessibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralLocationId");

                    b.ToTable("Accessibility_For_Disabilities");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralContacts");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralCost_Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Amount_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Valid_from")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Valid_to")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralCost_Options");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralEligibility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Eligibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Maximum_age")
                        .HasColumnType("int");

                    b.Property<int>("Minimum_age")
                        .HasColumnType("int");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralEligibilities");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralFunding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralFundings");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralHoliday_Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Closes_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceAtLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Opens_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceAtLocationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralHoliday_Schedules");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralLanguage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralLanguages");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralLinktaxonomycollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpenReferralTaxonomyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralParentId");

                    b.HasIndex("OpenReferralTaxonomyId");

                    b.ToTable("OpenReferralLinktaxonomycollections");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OpenReferralLocations");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralOrganisation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpenReferralOrganisations");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralParent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vocabulary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpenReferralParents");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralPhone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralContactId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralContactId");

                    b.ToTable("OpenReferralPhones");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralPhysical_Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address_1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Postal_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State_province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralLocationId");

                    b.ToTable("OpenReferralPhysical_Addresses");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralRegular_Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Byday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bymonthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Closes_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dtstart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Freq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceAtLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Opens_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Valid_from")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Valid_to")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceAtLocationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralRegular_Schedules");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralOrganisationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Widget")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralOrganisationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralReviews");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Accreditations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Assured_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Attending_access")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attending_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Deliverable_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpenReferralOrganisationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralOrganisationId");

                    b.ToTable("OpenReferralServices");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService_Area", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Extent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Service_area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralService_Areas");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService_Taxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaxonomyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralParentId");

                    b.HasIndex("OpenReferralServiceId");

                    b.HasIndex("TaxonomyId");

                    b.ToTable("OpenReferralService_Taxonomies");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralServiceAtLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralServiceAtLocations");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralServiceDeliveryEx", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceDeliveryEx")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralServiceDeliveries");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralTaxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpenReferralEligibilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Parent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vocabulary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralEligibilityId");

                    b.ToTable("OpenReferralTaxonomies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.Accessibility_For_Disabilities", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralLocation", null)
                        .WithMany("Accessibility_for_disabilities")
                        .HasForeignKey("OpenReferralLocationId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralContact", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Contacts")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralCost_Option", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Cost_options")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralEligibility", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Eligibilitys")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralFunding", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Fundings")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralHoliday_Schedule", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralServiceAtLocation", null)
                        .WithMany("HolidayScheduleCollection")
                        .HasForeignKey("OpenReferralServiceAtLocationId");

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Holiday_schedules")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralLanguage", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Languages")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralLinktaxonomycollection", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralParent", null)
                        .WithMany("LinkTaxonomyCollection")
                        .HasForeignKey("OpenReferralParentId");

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralTaxonomy", null)
                        .WithMany("LinkTaxonomyCollection")
                        .HasForeignKey("OpenReferralTaxonomyId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralPhone", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralContact", null)
                        .WithMany("Phones")
                        .HasForeignKey("OpenReferralContactId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralPhysical_Address", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralLocation", null)
                        .WithMany("Physical_addresses")
                        .HasForeignKey("OpenReferralLocationId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralRegular_Schedule", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralServiceAtLocation", null)
                        .WithMany("Regular_schedule")
                        .HasForeignKey("OpenReferralServiceAtLocationId");

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Regular_schedules")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralReview", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralOrganisation", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OpenReferralOrganisationId");

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralOrganisation", null)
                        .WithMany("Services")
                        .HasForeignKey("OpenReferralOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService_Area", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Service_areas")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService_Taxonomy", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralParent", null)
                        .WithMany("ServiceTaxonomyCollection")
                        .HasForeignKey("OpenReferralParentId");

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Service_taxonomys")
                        .HasForeignKey("OpenReferralServiceId");

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralTaxonomy", "Taxonomy")
                        .WithMany()
                        .HasForeignKey("TaxonomyId");

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralServiceAtLocation", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("Service_at_locations")
                        .HasForeignKey("OpenReferralServiceId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralServiceDeliveryEx", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralService", null)
                        .WithMany("ServiceDelivery")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralTaxonomy", b =>
                {
                    b.HasOne("LAHub.Domain.OpenReferralEnities.OpenReferralEligibility", null)
                        .WithMany("Taxonomys")
                        .HasForeignKey("OpenReferralEligibilityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralContact", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralEligibility", b =>
                {
                    b.Navigation("Taxonomys");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralLocation", b =>
                {
                    b.Navigation("Accessibility_for_disabilities");

                    b.Navigation("Physical_addresses");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralOrganisation", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralParent", b =>
                {
                    b.Navigation("LinkTaxonomyCollection");

                    b.Navigation("ServiceTaxonomyCollection");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralService", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Cost_options");

                    b.Navigation("Eligibilitys");

                    b.Navigation("Fundings");

                    b.Navigation("Holiday_schedules");

                    b.Navigation("Languages");

                    b.Navigation("Regular_schedules");

                    b.Navigation("Reviews");

                    b.Navigation("ServiceDelivery");

                    b.Navigation("Service_areas");

                    b.Navigation("Service_at_locations");

                    b.Navigation("Service_taxonomys");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralServiceAtLocation", b =>
                {
                    b.Navigation("HolidayScheduleCollection");

                    b.Navigation("Regular_schedule");
                });

            modelBuilder.Entity("LAHub.Domain.OpenReferralEnities.OpenReferralTaxonomy", b =>
                {
                    b.Navigation("LinkTaxonomyCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
